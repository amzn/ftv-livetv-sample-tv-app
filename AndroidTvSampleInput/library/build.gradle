apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    namespace 'com.google.android.media.tv.companionlibrary'

    defaultConfig {
        compileSdkVersion 34
        minSdkVersion 22
        targetSdkVersion 34
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

configurations {
    doclava
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.leanback:leanback:1.2.0-alpha04'
    implementation "androidx.localbroadcastmanager:localbroadcastmanager:1.1.0"
    implementation(platform("org.jetbrains.kotlin:kotlin-bom:1.8.0"))

    testImplementation 'junit:junit:4.13'
    testImplementation 'org.mockito:mockito-inline:3.12.4'
    testImplementation "org.robolectric:robolectric:3.1"

    // Update these dependencies to their AndroidX counterparts
    androidTestImplementation "androidx.annotation:annotation:1.8.2"
    androidTestImplementation "androidx.test:runner:1.6.2"
    androidTestImplementation "androidx.test:rules:1.6.1"
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.3.0'

    doclava 'com.google.doclava:doclava:1.0.6'
}

android.sourceSets.all { sourceSet ->
    def taskName = "generate${sourceSet.name.capitalize()}SourcesJar"
    task(taskName, type: Jar) {
        archiveClassifier.set("sources")
        from sourceSet.java.srcDirs
    }
}

task javadoc(type: Javadoc, dependsOn: project.configurations.doclava) {
    failOnError = false
    title = null
    source = android.sourceSets.main.java.srcDirs
    options.doclet = "com.google.doclava.Doclava"
    options.docletpath = configurations.doclava.files.asType(List)
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

afterEvaluate {
    javadoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.getJavaCompileProvider().get().classpath.files
    })
}
